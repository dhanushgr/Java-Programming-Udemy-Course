Object Oriented Programming.

Encapsulation:
       * Refers to bundling data with methods that can operate on that data within a class.
       * Itâ€™s the idea of hiding data within a class, preventing anything outside that class directly interacting with it.
       * Keeps the programmer in control of access to data.
       * Prevents the programmer from ending up in any strange or unwanted states.
       * Can impement Throw and Catch block of code. 

Abstraction:
       * Refers to the idea to only showing essential details and keeping everything else hidden.
       * The classes you create should act like your car. Users of your classes should not worry 
       about the inner details of those classes.
       * This is very important when working on your program incrementally.
       
Inheritance:
       * Is the principle that allows classes to derive from other classes.
       * ParentClass and ChildClass/SubClass are present
       * public ClassName(which will be ChildClass) extends ParentClass
       * ChildClass has all the properties of ParentClass. You can run every functions of ParentClass by using ChildClass(use the object of ChildClass in MainMethod and try to do the fucntions of the ParentClass)

Polymorphism:
       * Describes methods that are able to take on many forms.
       * Allows methods to take on many different forms.
       * Be sure that you are calling the correct form of the method.
       * There are two types of polymorphism: 
              ** Dynamic polymorphism: 
                     - Occurs during the runtime of the program.
                     - Describes when a method signature is in both subclass and a superclass.
                     - The methods share the same name but have different implementation.
                     - The implementation of the subclass that the object is an instance of 
                     overrides that of the superclass.
              ** Static polymorphism:
                     -  Occurs during compile-time rather than during runtime.
                     -  Refers to when multiply methods with the same name but different arguments
                        are defined in the same class.
                     -  The parameters are different type or taken in different order.
                      -  This is known as method overloading.

Constructor:
       * It has the same name as the ClassName.
       * Don't have a return type.
       ClassName(){                //This is constructor. By default this Constructor will be present.
                                   
       }

       ClassName(int a, int b, int c){    //This is a Constructor with arguments
              this.a=a;
              this.b=b;                   //sets a local variable(variable form other class) as a member variable(Variable of this class)
              this.c=c;
       }



       * in Main method:
              You can directly pass a argument while defining a object. 
              That is called initial state of the obj.(In opps this is used commonly)
              If you dont specify a initial state, it will be not used and be as a junk value until the value is assigned.
       
       Member variable which is "this.speed"(in our eg) will have the 0 assigned to it initially. 

       * Once you mention a constructor with parameters in your class, dont forget to call the normal constructor will no parameter.
         because java will erase the normal constructor(which was present in there by default), when you create your own constructor.
       
       Good Practice is to mention both of the constructor when you create it.
       
       